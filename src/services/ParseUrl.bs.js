// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.js";

function parseQueryParams(queryParams) {
  var firstQueryParamIndex;
  try {
    firstQueryParamIndex = $$String.index(queryParams, /* "=" */61);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      firstQueryParamIndex = -1;
    } else {
      throw exn;
    }
  }
  if (firstQueryParamIndex === -1) {
    return ;
  }
  var accessToken = List.hd($$String.split_on_char(/* "&" */38, Caml_array.get($$Array.of_list($$String.split_on_char(/* "=" */61, queryParams)), 1)));
  var stateKey = List.hd($$String.split_on_char(/* "&" */38, Caml_array.get($$Array.of_list($$String.split_on_char(/* "=" */61, queryParams)), 4)));
  return {
          accessToken: accessToken,
          stateKey: stateKey
        };
}

function getAccessToken(url) {
  var queryParamsStartIndex;
  try {
    queryParamsStartIndex = $$String.index(url, /* "#" */35);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      queryParamsStartIndex = -1;
    } else {
      throw exn;
    }
  }
  if (queryParamsStartIndex === -1) {
    return ;
  }
  var match = $$String.split_on_char(/* "#" */35, url);
  if (match) {
    var match$1 = match.tl;
    if (match$1 && !match$1.tl) {
      var match$2 = parseQueryParams(match$1.hd);
      if (match$2 !== undefined) {
        return match$2.accessToken;
      } else {
        return ;
      }
    }
    
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "ParseUrl.re",
          37,
          9
        ],
        Error: new Error()
      };
}

function getState(url) {
  var queryParamsStartIndex;
  try {
    queryParamsStartIndex = $$String.index(url, /* "#" */35);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      queryParamsStartIndex = -1;
    } else {
      throw exn;
    }
  }
  if (queryParamsStartIndex === -1) {
    return ;
  }
  var match = $$String.split_on_char(/* "#" */35, url);
  if (match) {
    var match$1 = match.tl;
    if (match$1 && !match$1.tl) {
      var match$2 = parseQueryParams(match$1.hd);
      if (match$2 !== undefined) {
        return match$2.stateKey;
      } else {
        return ;
      }
    }
    
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "ParseUrl.re",
          55,
          9
        ],
        Error: new Error()
      };
}

export {
  parseQueryParams ,
  getAccessToken ,
  getState ,
  
}
/* No side effect */
